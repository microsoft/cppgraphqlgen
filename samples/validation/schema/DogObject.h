// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef DOGOBJECT_H
#define DOGOBJECT_H

#include "ValidationSchema.h"

namespace graphql::validation::object {
namespace implements {

template <class I>
concept DogIs = std::is_same_v<I, Pet> || std::is_same_v<I, CatOrDog> || std::is_same_v<I, DogOrHuman>;

} // namespace implements

namespace methods::DogHas {

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getName() } };
};

template <class TImpl>
concept getNicknameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<std::string>> { impl.getNickname(std::move(params)) } };
};

template <class TImpl>
concept getNickname = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<std::string>> { impl.getNickname() } };
};

template <class TImpl>
concept getBarkVolumeWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<int>> { impl.getBarkVolume(std::move(params)) } };
};

template <class TImpl>
concept getBarkVolume = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<int>> { impl.getBarkVolume() } };
};

template <class TImpl>
concept getDoesKnowCommandWithParams = requires (TImpl impl, service::FieldParams params, DogCommand dogCommandArg)
{
	{ service::AwaitableScalar<bool> { impl.getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) } };
};

template <class TImpl>
concept getDoesKnowCommand = requires (TImpl impl, DogCommand dogCommandArg)
{
	{ service::AwaitableScalar<bool> { impl.getDoesKnowCommand(std::move(dogCommandArg)) } };
};

template <class TImpl>
concept getIsHousetrainedWithParams = requires (TImpl impl, service::FieldParams params, std::optional<bool> atOtherHomesArg)
{
	{ service::AwaitableScalar<bool> { impl.getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) } };
};

template <class TImpl>
concept getIsHousetrained = requires (TImpl impl, std::optional<bool> atOtherHomesArg)
{
	{ service::AwaitableScalar<bool> { impl.getIsHousetrained(std::move(atOtherHomesArg)) } };
};

template <class TImpl>
concept getOwnerWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableObject<std::shared_ptr<Human>> { impl.getOwner(std::move(params)) } };
};

template <class TImpl>
concept getOwner = requires (TImpl impl)
{
	{ service::AwaitableObject<std::shared_ptr<Human>> { impl.getOwner() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::DogHas

class [[nodiscard]] Dog final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveNickname(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveBarkVolume(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveDoesKnowCommand(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveIsHousetrained(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveOwner(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<std::string> getName(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<std::string>> getNickname(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<int>> getBarkVolume(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<bool> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<bool> getIsHousetrained(service::FieldParams&& params, std::optional<bool>&& atOtherHomesArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getNameWithParams<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getName is not implemented)ex");
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<std::string>> getNickname(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getNicknameWithParams<T>)
			{
				return { _pimpl->getNickname(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getNickname<T>)
			{
				return { _pimpl->getNickname() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getNickname is not implemented)ex");
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<int>> getBarkVolume(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getBarkVolumeWithParams<T>)
			{
				return { _pimpl->getBarkVolume(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getBarkVolume<T>)
			{
				return { _pimpl->getBarkVolume() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getBarkVolume is not implemented)ex");
			}
		}

		[[nodiscard]] service::AwaitableScalar<bool> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const final
		{
			if constexpr (methods::DogHas::getDoesKnowCommandWithParams<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) };
			}
			else if constexpr (methods::DogHas::getDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(dogCommandArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getDoesKnowCommand is not implemented)ex");
			}
		}

		[[nodiscard]] service::AwaitableScalar<bool> getIsHousetrained(service::FieldParams&& params, std::optional<bool>&& atOtherHomesArg) const final
		{
			if constexpr (methods::DogHas::getIsHousetrainedWithParams<T>)
			{
				return { _pimpl->getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) };
			}
			else if constexpr (methods::DogHas::getIsHousetrained<T>)
			{
				return { _pimpl->getIsHousetrained(std::move(atOtherHomesArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getIsHousetrained is not implemented)ex");
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getOwnerWithParams<T>)
			{
				return { _pimpl->getOwner(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getOwner<T>)
			{
				return { _pimpl->getOwner() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getOwner is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DogHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DogHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Dog(std::unique_ptr<const Concept>&& pimpl) noexcept;

	// Interfaces which this type implements
	friend Pet;

	// Unions which include this type
	friend CatOrDog;
	friend DogOrHuman;

	template <class I>
	[[nodiscard]] static constexpr bool implements() noexcept
	{
		return implements::DogIs<I>;
	}

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const override;
	void endSelectionSet(const service::SelectionSetParams& params) const override;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	Dog(std::shared_ptr<T> pimpl) noexcept
		: Dog { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(Dog)gql" };
	}
};

} // namespace graphql::validation::object

#endif // DOGOBJECT_H
